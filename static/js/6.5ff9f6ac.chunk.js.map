{"version":3,"sources":["HOC/WithAuthRedirect.tsx","components/common/FormsControls/FormsControls.tsx","utils/validator/validors.tsx","components/common/FormsControls/FormsControls.module.css","components/Bonus/Bonus.module.css","Login/Login.tsx","components/Bonus/DialogItem/DialogItem.tsx","components/Bonus/Message/Message.tsx","components/Bonus/Bonus.tsx","components/Bonus/BonusContainer.tsx"],"names":["mapStateToPropsRedirect","state","isAuth","auth_user","WithAuthRedirect","Component","connect","props","restProps","to","FormControl","meta","touched","error","children","hasError","className","css","formControl","Textarea","input","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","undefined","module","exports","LoginReduxForm","reduxForm","form","captchaUrl","useSelector","onSubmit","handleSubmit","type","src","alt","Login","userId","formData","login","inputLogin","inputPassword","inputCheckbox","captcha","maxLength10","BonusForm","BonusReduxForm","DialogItem","img","id","activeClassName","active","Message","day","message","Bonus","React","memo","messageData","bonusPage","messagesBonusData","map","t","dialogData","dialogsBonusData","dialogs","box","values","addPostBonusText","BonusTextarea","compose","dispatch","AddPostBonus"],"mappings":"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","file":"static/js/6.5ff9f6ac.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\"\r\nimport React, {ComponentType} from \"react\"\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type MapStateToPropsTypeRedirect = {\r\n    isAuth:boolean\r\n}\r\nlet mapStateToPropsRedirect = (state: AppStateType) :MapStateToPropsTypeRedirect => ({\r\n    isAuth:state.auth_user.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect <T> (Component:ComponentType<T>) {\r\n    function RedirectComponent(props:MapStateToPropsTypeRedirect) {\r\n\r\n        let {isAuth,...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n","\r\nimport css from './FormsControls.module.css'\r\nimport React from \"react\"\r\nimport  {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validator/validors\";\r\nimport  {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\n\r\n\r\ntype TextAreaProps ={\r\n    input:string\r\n    meta:any\r\n    child:any\r\n}\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\nexport const FormControl:React.FC<FormControlPropsType> = ({meta: {touched, error}, children})=>{\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={css.formControl + '' + ( hasError ? css.error : '' ) }>\r\n            {children}\r\n            <div>\r\n                { hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input:React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n   return <div>\r\n       <Field placeholder={placeholder} name={name}\r\n              validate={validators}\r\n              component={component}\r\n              {...props}\r\n       /> {text}\r\n    </div>\r\n}","export interface AddUserParamsType  {\r\n    value :string\r\n}\r\n\r\n\r\nexport const required = (value:AddUserParamsType) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number)=> (value:any) =>\r\n    value && value.length > maxLength ? `Must be ${maxLength} characters or less` : undefined\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3d2ED\",\"error\":\"FormsControls_error__1gDGv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Bonus_dialogs__3dpck\",\"box\":\"Bonus_box__3p-V6\",\"name\":\"Bonus_name__34NwY\"};","import React from \"react\"\r\nimport {Field, reduxForm, InjectedFormProps} from 'redux-form'\r\nimport {BonusPropsType} from \"../components/Bonus/BonusContainer\";\r\nimport {BonusType} from \"../components/Bonus/Bonus\";\r\nimport {maxLengthCreator, required} from \"../utils/validator/validors\";\r\nimport {Input, Textarea} from \"../components/common/FormsControls/FormsControls\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {login} from \"../redux/Auth-reducer/auth_reducer\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype UserInputType = {\r\n    inputLogin: string\r\n    inputPassword: string\r\n    inputCheckbox: boolean\r\n    captcha?:string\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<UserInputType>> = (props) => {\r\n    const captchaUrl = useSelector<AppStateType, null | string>(state => state.auth_user.captchaUrl)\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <b>mail</b>\r\n                <Field\r\n                    name={\"inputLogin\"} type=\"text\"\r\n                    component={Input} placeholder={'Login'}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>password</b>\r\n                <Field name={\"inputPassword\"} type=\"password\" component={Input} placeholder={'Password'}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field name={\"inputCheckbox\"} type='checkbox' component={'input'}/>remember me\r\n            </div>\r\n            {props.error &&\r\n            <div>\r\n                {props.error}\r\n            </div>\r\n            }\r\n\r\n            {captchaUrl &&\r\n            <div>\r\n                <div>\r\n                    <img src={captchaUrl} alt='captcha'/>\r\n                </div>\r\n                <Field name={\"captcha\"} type='text' component={'input'}/>\r\n            </div>\r\n            }\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<UserInputType>({form: 'login'})(LoginForm)\r\n\r\n\r\nexport const Login = (props: any) => {\r\n    const onSubmit = (formData: UserInputType) => {\r\n        props.login(formData.inputLogin, formData.inputPassword, formData.inputCheckbox, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={`/profile/${props.userId}`}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n            <div><b>Email:</b> free@samuraijs.com</div>\r\n            <div><b>Password:</b> free</div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth_user.isAuth,\r\n    userId: state.auth_user.userId\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nexport const BonusForm: React.FC<InjectedFormProps<BonusPropsType & BonusType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <Field name=\"BonusTextarea\" type='text' component={Textarea}\r\n                   validate={[required, maxLength10]}\r\n                   placeholder='Message'\r\n\r\n            />\r\n            <div>\r\n                <button>add mes</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const BonusReduxForm = reduxForm<BonusPropsType & BonusType>({form: 'BonusMessage'})(BonusForm)\r\n\r\n\r\n","import css from \"../Bonus.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nexport type DialogsItemPropsType={\r\n    id:number\r\n    name:string\r\n    img:string\r\n}\r\nexport const DialogItem = (props:DialogsItemPropsType) =>{\r\n\r\n\r\n\r\n    return (\r\n        <div className={css.name}>\r\n            <img src={props.img} alt=\"\"/>\r\n            <NavLink to={'/Bonus/'+props.id} activeClassName={css.active}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import css from \"../Bonus.module.css\";\r\nimport React from \"react\";\r\n\r\nexport type Message ={\r\n    message:string\r\n}\r\n\r\n\r\nexport const Message = (props:Message) =>{\r\n    return (\r\n        <div className={css.day}> {props.message}</div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport css from './Bonus.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {BonusPropsType} from \"./BonusContainer\";\r\nimport {BonusReduxForm} from \"../../Login/Login\";\r\n\r\nexport type BonusType ={\r\n    BonusTextarea:string\r\n}\r\n\r\nexport const Bonus = React.memo((props: BonusPropsType) => {\r\n\r\n    let messageData = props.bonusPage.messagesBonusData.map(t => <Message message={t.message}/>)\r\n\r\n    let dialogData = props.bonusPage.dialogsBonusData.map(t => <DialogItem id={t.id} name={t.name} img={t.img}/>)\r\n\r\n\r\n    let addPostMessageText = (values: BonusType) => {\r\n\r\n        props.addPostBonusText(values.BonusTextarea)\r\n        values.BonusTextarea = ''\r\n    }\r\n\r\n    return (\r\n        <div className={css.dialogs}>\r\n            <div className={css.box}>\r\n                {dialogData}\r\n            </div>\r\n            <div className={css.box}>\r\n                <h3>Привет как дела?</h3>\r\n                {messageData}\r\n                <BonusReduxForm onSubmit={addPostMessageText}/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n","import {Bonus} from \"./Bonus\";\r\nimport {connect} from \"react-redux\";\r\nimport {  InitialBonusStateType, AddPostBonus} from \"../../redux/Bonus-reducer/Bonus_reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport React from \"react\";\r\nimport {WithAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\n\r\nexport type BonusPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    bonusPage: InitialBonusStateType\r\n    isAuth:boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPostBonusText: (values:string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        bonusPage: state.bonusPage,\r\n        isAuth: state.auth_user.isAuth\r\n    }\r\n}\r\n\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPostBonusText: (values:string) => {\r\n            dispatch(AddPostBonus(values))\r\n        },\r\n\r\n    }\r\n    }\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Bonus)\r\n\r\n/*let AuthRedirectBonus = WithAuthRedirect(Bonus)\r\n\r\nexport const BonusContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectBonus)*/\r\n\r\n\r\n"],"sourceRoot":""}
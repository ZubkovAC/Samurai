{"version":3,"sources":["HOC/WithAuthRedirect.tsx","utils/validator/validors.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","components/Bonus/Bonus.module.css","Login/Login.tsx","components/Bonus/DialogItem/DialogItem.tsx","components/Bonus/Message/Message.tsx","components/Bonus/Bonus.tsx","components/Bonus/BonusContainer.tsx"],"names":["mapStateToPropsRedirect","state","isAuth","auth_user","WithAuthRedirect","Component","connect","props","restProps","to","required","value","maxLengthCreator","maxLength","length","undefined","FormControl","input","meta","hasError","touched","error","className","css","formControl","children","Textarea","child","Input","module","exports","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","name","type","component","placeholder","validate","Login","userId","formData","login","inputLogin","inputPassword","inputCheckbox","maxLength10","BonusForm","BonusReduxForm","DialogItem","src","img","alt","id","activeClassName","active","Message","day","message","Bonus","React","memo","messageData","bonusPage","messagesBonusData","map","t","dialogData","dialogsBonusData","dialogs","box","values","addPostBonusText","BonusTextarea","compose","dispatch","AddPostBonus"],"mappings":"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","file":"static/js/6.485a913f.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\"\r\nimport React, {ComponentType} from \"react\"\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type MapStateToPropsTypeRedirect = {\r\n    isAuth:boolean\r\n}\r\nlet mapStateToPropsRedirect = (state: AppStateType) :MapStateToPropsTypeRedirect => ({\r\n    isAuth:state.auth_user.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect <T> (Component:ComponentType<T>) {\r\n    function RedirectComponent(props:MapStateToPropsTypeRedirect) {\r\n\r\n        let {isAuth,...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n","export interface AddUserParamsType  {\r\n    value :string\r\n}\r\n\r\n\r\nexport const required = (value:AddUserParamsType) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number)=> (value:any) =>\r\n    value && value.length > maxLength ? `Must be ${maxLength} characters or less` : undefined\r\n\r\n","\r\nimport css from './FormsControls.module.css'\r\nimport React from \"react\"\r\ntype TextAreaProps ={\r\n    input:string\r\n    meta:any\r\n    child:any\r\n}\r\n\r\nexport const FormControl:React.FC<TextAreaProps> = ({input, meta,...restProps})=>{\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={css.formControl + '' + ( hasError ? css.error : '' ) }>\r\n            {restProps.children}\r\n            <div>\r\n                { hasError && <span>{meta.error}</span>}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea:React.FC<TextAreaProps> = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input:React.FC<TextAreaProps> = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3d2ED\",\"error\":\"FormsControls_error__1gDGv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Bonus_dialogs__3dpck\",\"name\":\"Bonus_name__34NwY\"};","import React from \"react\"\r\nimport { Field, reduxForm, InjectedFormProps } from 'redux-form'\r\nimport {BonusPropsType} from \"../components/Bonus/BonusContainer\";\r\nimport {BonusType} from \"../components/Bonus/Bonus\";\r\nimport { maxLengthCreator, required} from \"../utils/validator/validors\";\r\nimport {Input, Textarea} from \"../components/common/FormsControls/FormsControls\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../redux/Auth-reducer/auth_reducer\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ntype UserInputType= {\r\n    inputLogin:string\r\n    inputPassword:string\r\n    inputCheckbox:boolean\r\n}\r\n\r\n\r\n\r\nconst LoginForm:React.FC<InjectedFormProps<UserInputType>> = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit} >\r\n            <div>\r\n                <Field\r\n                    name={\"inputLogin\"}  type=\"text\"\r\n                    component={Input} placeholder={'Login'}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field name={\"inputPassword\"}  type={\"password\"} component={Input} placeholder={'Password'} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field name={\"inputCheckbox\"}   type='checkbox' component={'input'} />remember me\r\n            </div>\r\n            {props.error &&\r\n                <div>\r\n                    {props.error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n\r\n        </form>\r\n    )}\r\n\r\nconst LoginReduxForm = reduxForm<UserInputType> ({ form: 'login' })(LoginForm)\r\n\r\n\r\n\r\n\r\nexport const Login = (props:any) => {\r\n    const onSubmit = (formData:UserInputType)=>{\r\n        debugger\r\n        props.login(formData.inputLogin,formData.inputPassword,formData.inputCheckbox)\r\n    }\r\n    if(props.isAuth) {\r\n        return <Redirect to={`/profile/${props.userId}`}/>\r\n    }\r\n    return(\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state:AppStateType) => ({\r\n    isAuth: state.auth_user.isAuth,\r\n    userId:state.auth_user.userId\r\n})\r\n\r\nexport default connect(mapStateToProps ,{login})(Login)\r\n\r\n\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nexport const BonusForm :React.FC<InjectedFormProps<BonusPropsType & BonusType>> = (props)=>{\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <Field name=\"BonusTextarea\" type='text' component={Textarea}\r\n                   validate={[required, maxLength10]}\r\n                   placeholder='Message'\r\n\r\n            />\r\n            <div>\r\n                <button>add mes</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const BonusReduxForm = reduxForm<BonusPropsType & BonusType> ({ form: 'BonusMessage' })(BonusForm)\r\n\r\n\r\n","import css from \"../Bonus.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nexport type DialogsItemPropsType={\r\n    id:number\r\n    name:string\r\n    img:string\r\n}\r\nexport const DialogItem = (props:DialogsItemPropsType) =>{\r\n\r\n\r\n\r\n    return (\r\n        <div className={css.name}>\r\n            <img src={props.img} alt=\"\"/>\r\n            <NavLink to={'/Bonus/'+props.id} activeClassName={css.active}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import css from \"../Bonus.module.css\";\r\nimport React from \"react\";\r\n\r\nexport type Message ={\r\n    message:string\r\n}\r\n\r\n\r\nexport const Message = (props:Message) =>{\r\n    return (\r\n        <div className={css.day}> {props.message}</div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport css from './Bonus.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {BonusPropsType} from \"./BonusContainer\";\r\nimport {BonusReduxForm} from \"../../Login/Login\";\r\n\r\nexport type BonusType ={\r\n    BonusTextarea:string\r\n}\r\n\r\nexport const Bonus = React.memo((props: BonusPropsType) => {\r\n\r\n    let messageData = props.bonusPage.messagesBonusData.map(t => <Message message={t.message}/>)\r\n\r\n    let dialogData = props.bonusPage.dialogsBonusData.map(t => <DialogItem id={t.id} name={t.name} img={t.img}/>)\r\n\r\n\r\n    let addPostMessageText = (values: BonusType) => {\r\n\r\n        props.addPostBonusText(values.BonusTextarea)\r\n        values.BonusTextarea = ''\r\n    }\r\n\r\n    return (\r\n        <div className={css.dialogs}>\r\n            <div className={css.box}>\r\n                {dialogData}\r\n            </div>\r\n            <div>\r\n                {messageData}\r\n                <BonusReduxForm onSubmit={addPostMessageText}/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n","import {Bonus} from \"./Bonus\";\r\nimport {connect} from \"react-redux\";\r\nimport {  InitialBonusStateType, AddPostBonus} from \"../../redux/Bonus-reducer/Bonus_reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport React from \"react\";\r\nimport {WithAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\n\r\nexport type BonusPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    bonusPage: InitialBonusStateType\r\n    isAuth:boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPostBonusText: (values:string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        bonusPage: state.bonusPage,\r\n        isAuth: state.auth_user.isAuth\r\n    }\r\n}\r\n\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPostBonusText: (values:string) => {\r\n            dispatch(AddPostBonus(values))\r\n        },\r\n\r\n    }\r\n    }\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Bonus)\r\n\r\n/*let AuthRedirectBonus = WithAuthRedirect(Bonus)\r\n\r\nexport const BonusContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectBonus)*/\r\n\r\n\r\n"],"sourceRoot":""}
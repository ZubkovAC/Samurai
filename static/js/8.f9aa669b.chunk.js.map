{"version":3,"sources":["utils/validator/validors.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","Login/Login.tsx"],"names":["required","value","maxLengthCreator","maxLength","length","undefined","FormControl","input","meta","restProps","hasError","touched","error","className","css","formControl","children","Textarea","props","child","Input","module","exports","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","name","type","component","placeholder","validate","Login","isAuth","to","userId","formData","login","inputLogin","inputPassword","inputCheckbox","connect","state","auth_user","maxLength10","BonusForm","BonusReduxForm"],"mappings":"4IAKA,oEAAO,IAAMA,EAAW,SAACC,GACrB,IAAIA,EAEJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAqB,SAACF,GAAD,OACjDA,GAASA,EAAMG,OAASD,EAAxB,kBAA+CA,EAA/C,4BAAgFE,K,oJCHvEC,EAAsC,SAAC,GAA6B,EAA5BC,MAA6B,IAAtBC,EAAqB,EAArBA,KAAQC,EAAa,gCACvEC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,yBAAKC,UAAWC,IAAIC,YAAc,IAAOL,EAAWI,IAAIF,MAAQ,KAC3DH,EAAUO,SACX,6BACMN,GAAY,8BAAOF,EAAKI,UAQ7BK,EAAmC,SAACC,GAAW,IACjDX,EAAoCW,EAApCX,MAAuBE,GAAaS,EAA7BV,KAA6BU,EAAvBC,MADmC,YACZD,EADY,2BAEvD,OAAO,kBAACZ,EAAgBY,EAAO,8CAAcX,EAAWE,MAG/CW,EAAgC,SAACF,GAAW,IAC9CX,EAAoCW,EAApCX,MAAuBE,GAAaS,EAA7BV,KAA6BU,EAAvBC,MADgC,YACTD,EADS,2BAEpD,OAAO,kBAACZ,EAAgBY,EAAO,2CAAWX,EAAWE,O,oBC7BzDY,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,iCCD3E,qNA+CMC,EAAiBC,YAA0B,CAAEC,KAAM,SAAlCD,EA5BsC,SAACN,GAC1D,OACI,0BAAMQ,SAAUR,EAAMS,cAClB,6BACI,kBAAC,IAAD,CACIC,KAAM,aAAeC,KAAK,OAC1BC,UAAWV,IAAOW,YAAa,QAC/BC,SAAU,CAAChC,QAGnB,6BACI,kBAAC,IAAD,CAAO4B,KAAM,gBAAkBC,KAAM,WAAYC,UAAWV,IAAOW,YAAa,WAAYC,SAAU,CAAChC,QAE3G,6BACI,kBAAC,IAAD,CAAO4B,KAAM,gBAAmBC,KAAK,WAAWC,UAAW,UAD/D,eAGCZ,EAAMN,OACH,6BACKM,EAAMN,OAGf,6BACI,8CAWHqB,EAAQ,SAACf,GAKlB,OAAGA,EAAMgB,OACE,kBAAC,IAAD,CAAUC,GAAE,mBAAcjB,EAAMkB,UAGvC,6BACI,qCACA,kBAACb,EAAD,CAAgBG,SAVP,SAACW,GAEdnB,EAAMoB,MAAMD,EAASE,WAAWF,EAASG,cAAcH,EAASI,oBAkBzDC,uBALS,SAACC,GAAD,MAAyB,CAC7CT,OAAQS,EAAMC,UAAUV,OACxBE,OAAOO,EAAMC,UAAUR,UAGa,CAACE,WAA1BI,CAAkCT,GAKjD,IAAMY,EAAc3C,YAAiB,IACxB4C,EAAqE,SAAC5B,GAE/E,OACI,0BAAMQ,SAAUR,EAAMS,cAElB,kBAAC,IAAD,CAAOC,KAAK,gBAAgBC,KAAK,OAAOC,UAAWb,IAC5Ce,SAAU,CAAChC,IAAU6C,GACrBd,YAAY,YAGnB,6BACI,8CAKHgB,EAAiBvB,YAAuC,CAAEC,KAAM,gBAA/CD,CAAiEsB","file":"static/js/8.f9aa669b.chunk.js","sourcesContent":["export interface AddUserParamsType  {\r\n    value :string\r\n}\r\n\r\n\r\nexport const required = (value:AddUserParamsType) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number)=> (value:any) =>\r\n    value && value.length > maxLength ? `Must be ${maxLength} characters or less` : undefined\r\n\r\n","\r\nimport css from './FormsControls.module.css'\r\nimport React from \"react\"\r\ntype TextAreaProps ={\r\n    input:string\r\n    meta:any\r\n    child:any\r\n}\r\n\r\nexport const FormControl:React.FC<TextAreaProps> = ({input, meta,...restProps})=>{\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={css.formControl + '' + ( hasError ? css.error : '' ) }>\r\n            {restProps.children}\r\n            <div>\r\n                { hasError && <span>{meta.error}</span>}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea:React.FC<TextAreaProps> = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input:React.FC<TextAreaProps> = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3d2ED\",\"error\":\"FormsControls_error__1gDGv\"};","import React from \"react\"\r\nimport { Field, reduxForm, InjectedFormProps } from 'redux-form'\r\nimport {BonusPropsType} from \"../components/Bonus/BonusContainer\";\r\nimport {BonusType} from \"../components/Bonus/Bonus\";\r\nimport { maxLengthCreator, required} from \"../utils/validator/validors\";\r\nimport {Input, Textarea} from \"../components/common/FormsControls/FormsControls\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../redux/Auth-reducer/auth_reducer\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ntype UserInputType= {\r\n    inputLogin:string\r\n    inputPassword:string\r\n    inputCheckbox:boolean\r\n}\r\n\r\n\r\n\r\nconst LoginForm:React.FC<InjectedFormProps<UserInputType>> = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit} >\r\n            <div>\r\n                <Field\r\n                    name={\"inputLogin\"}  type=\"text\"\r\n                    component={Input} placeholder={'Login'}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field name={\"inputPassword\"}  type={\"password\"} component={Input} placeholder={'Password'} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field name={\"inputCheckbox\"}   type='checkbox' component={'input'} />remember me\r\n            </div>\r\n            {props.error &&\r\n                <div>\r\n                    {props.error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n\r\n        </form>\r\n    )}\r\n\r\nconst LoginReduxForm = reduxForm<UserInputType> ({ form: 'login' })(LoginForm)\r\n\r\n\r\n\r\n\r\nexport const Login = (props:any) => {\r\n    const onSubmit = (formData:UserInputType)=>{\r\n        debugger\r\n        props.login(formData.inputLogin,formData.inputPassword,formData.inputCheckbox)\r\n    }\r\n    if(props.isAuth) {\r\n        return <Redirect to={`/profile/${props.userId}`}/>\r\n    }\r\n    return(\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state:AppStateType) => ({\r\n    isAuth: state.auth_user.isAuth,\r\n    userId:state.auth_user.userId\r\n})\r\n\r\nexport default connect(mapStateToProps ,{login})(Login)\r\n\r\n\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nexport const BonusForm :React.FC<InjectedFormProps<BonusPropsType & BonusType>> = (props)=>{\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <Field name=\"BonusTextarea\" type='text' component={Textarea}\r\n                   validate={[required, maxLength10]}\r\n                   placeholder='Message'\r\n\r\n            />\r\n            <div>\r\n                <button>add mes</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const BonusReduxForm = reduxForm<BonusPropsType & BonusType> ({ form: 'BonusMessage' })(BonusForm)\r\n\r\n\r\n"],"sourceRoot":""}
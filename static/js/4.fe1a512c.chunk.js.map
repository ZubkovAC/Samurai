{"version":3,"sources":["HOC/WithAuthRedirect.tsx","components/common/FormsControls/FormsControls.tsx","utils/validator/validors.tsx","components/common/FormsControls/FormsControls.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/reselect/es/index.js","redux/users-selesctors.tsx","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsRedirect","state","isAuth","auth_user","WithAuthRedirect","Component","connect","props","restProps","to","FormControl","meta","touched","error","children","hasError","className","css","formControl","Textarea","input","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","undefined","module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","getDependencies","funcs","dependencies","every","dep","dependencyTypes","map","join","Error","createSelector","memoize","_len","arguments","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","apply","concat","selector","params","resetRecomputations","createSelectorCreator","func","lastArgs","lastResult","getUserLoad","users","getPageSize","filter","u","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getProfile","profile","getUserId","userId","getStatusProfile","status","getAuthorizeUserId","getIsAuth","ProfileStatus","useState","editMode","setEditMode","setStatus","useEffect","onKeyUp","e","key","updateStatus","onChange","currentTarget","onBlur","autoFocus","onDoubleClick","ProfileDataFormRedixForm","reduxForm","form","handleSubmit","onSubmit","type","keys","contacts","ProfileInfo","React","memo","dispatch","useDispatch","useSelector","edit","src","photos","large","alt","isOwner","target","files","savePhoto","initialValues","formData","console","log","profileDataTC","goToEditMode","setEditModeB","ProfileData","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Contact","contactTitle","contactValue","style","paddingLeft","Post","post","message","likecount","maxLength40","MyPosts","postData","postsProfile","t","id","ProfileFormReduxForm","Field","content","addPostProfile","ProfileInput","MyPostsContainer","Profile","ProfileContainer","this","match","authorizeUserId","history","setUserStatus","setUserProfile","refreshProfile","prevProps","prevState","snapshot","savePhotoTC","compose","withRouter"],"mappings":"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","file":"static/js/4.fe1a512c.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\"\r\nimport React, {ComponentType} from \"react\"\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type MapStateToPropsTypeRedirect = {\r\n    isAuth:boolean\r\n}\r\nlet mapStateToPropsRedirect = (state: AppStateType) :MapStateToPropsTypeRedirect => ({\r\n    isAuth:state.auth_user.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect <T> (Component:ComponentType<T>) {\r\n    function RedirectComponent(props:MapStateToPropsTypeRedirect) {\r\n\r\n        let {isAuth,...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n","\r\nimport css from './FormsControls.module.css'\r\nimport React from \"react\"\r\nimport  {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validator/validors\";\r\nimport  {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\n\r\n\r\ntype TextAreaProps ={\r\n    input:string\r\n    meta:any\r\n    child:any\r\n}\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\nexport const FormControl:React.FC<FormControlPropsType> = ({meta: {touched, error}, children})=>{\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={css.formControl + '' + ( hasError ? css.error : '' ) }>\r\n            {children}\r\n            <div>\r\n                { hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input:React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n   return <div>\r\n       <Field placeholder={placeholder} name={name}\r\n              validate={validators}\r\n              component={component}\r\n              {...props}\r\n       /> {text}\r\n    </div>\r\n}","export interface AddUserParamsType  {\r\n    value :string\r\n}\r\n\r\n\r\nexport const required = (value:AddUserParamsType) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number)=> (value:any) =>\r\n    value && value.length > maxLength ? `Must be ${maxLength} characters or less` : undefined\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3d2ED\",\"error\":\"FormsControls_error__1gDGv\"};","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nexport var createSelector = createSelectorCreator(defaultMemoize);\n\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n//UsersContainer\r\nexport const getUserLoad = (state:AppStateType) => {\r\n    return state.users.users\r\n}\r\n// reselect (max dependence - 3 ) need from state - filter, map, reduce, ... - analog useCallback (max dependence -1 )\r\n// next reselect 3x3 = max 9 - controlled parametrs .... 9x3 = 27 ....\r\nexport const getUserLoadSuper = createSelector(getUserLoad,(users) => {\r\n    users.filter( u => true)\r\n})\r\n/*export const getUserLoadSuperAndgetPageSize = createSelector(getUserLoad,getPageSize(users,pageSize) => {\r\n    users.filter( u => true)                        -- no good x2 params\r\n})*/\r\nexport const getPageSize = (state:AppStateType) => {\r\n    return state.users.pageSize\r\n}\r\nexport const getTotalUsersCount = (state:AppStateType) => {\r\n    return state.users.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state:AppStateType) => {\r\n    return state.users.currentPage\r\n}\r\nexport const getIsFetching = (state:AppStateType) => {\r\n    return state.users.isFetching\r\n}\r\nexport const getFollowingInProgress = (state:AppStateType) => {\r\n    return state.users.followingInProgress\r\n}\r\n\r\n//UsersContainer\r\n\r\nexport const getProfile = (state:AppStateType) => {\r\n    return state.profile.profile\r\n}\r\nexport const getUserId = (state:AppStateType) => {\r\n    return state.profile.userId\r\n}\r\nexport const getStatusProfile = (state:AppStateType) => {\r\n    return state.profile.status\r\n}\r\nexport const getAuthorizeUserId = (state:AppStateType) => {\r\n    return state.auth_user.userId\r\n}\r\n\r\n\r\n//UsersContainer & //UsersContainer\r\nexport const getIsAuth = (state:AppStateType) => {\r\n    return state.auth_user.isAuth\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__33Nji\",\"photo\":\"Profile_photo__1olw0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"ProfileInfo_ProfileInfo__2GZvK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__2YDBg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3H89X\"};","import React, {useEffect, useState} from \"react\"\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus:(status:string)=>void\r\n\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n\r\n    useEffect( ()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const DoubleCLick = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivetedEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode ?\r\n                <span onDoubleClick={DoubleCLick}>\r\n                {status ? status :'hello' }\r\n                </span>\r\n                :\r\n                <input\r\n                    onKeyUp={(e) => {\r\n                        if (e.key === \"Enter\") {\r\n                            setEditMode(false)\r\n                            props.updateStatus(status)\r\n                        }\r\n                    }}\r\n                    onChange={(e) => {\r\n                        setStatus(e.currentTarget.value)\r\n                    }} value={status}\r\n                    onBlur={deactivetedEditMode}\r\n                    autoFocus={true}\r\n                />\r\n\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {ProfilePropsType} from \"../../../redux/Profile-reducer/Profile_Reducer\";\r\nimport  {InjectedFormProps,reduxForm} from \"redux-form\";\r\n\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n\r\ntype PropsType = {\r\n    profile: ProfilePropsType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfilePropsType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfilePropsType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div >\r\n            {error}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <b>Full name *</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: { createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills *</b>:\r\n            { createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <b>About me *</b>:\r\n            { createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea  )}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} >\r\n                <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormRedixForm = reduxForm<ProfilePropsType,PropsType>({form:'edit-Profile'})(ProfileDataForm)\r\nexport default ProfileDataFormRedixForm","import React, {useState} from \"react\";\r\nimport css from './ProfileInfo.module.css'\r\nimport {profileDataTC, ProfilePropsType} from \"../../../redux/Profile-reducer/Profile_Reducer\";\r\nimport {ProfileStatus} from './ProfileStatus'\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {createField} from \"../../common/FormsControls/FormsControls\";\r\nimport {AppStateType, AppStoreType} from \"../../../redux/redux-store\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (e:any)=>void\r\n}\r\n\r\nexport const ProfileInfo = React.memo((props: MapStateToPropsType) => {\r\n    const dispatch = useDispatch()\r\n    let userId = useSelector<AppStateType,number>(state => state.auth_user.userId)\r\n    const [edit,setEditMode]=useState<boolean>(false)\r\n    const mainPhotoSelected = (e:any) => {\r\n        if(e.target.files.length){\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfilePropsType) => {\r\n        console.log(formData)\r\n        dispatch(profileDataTC(formData,userId))\r\n        setEditMode(false)\r\n    }\r\n    const setEditModeB =(edit:boolean) =>{\r\n        setEditMode(edit)\r\n    }\r\n    return (\r\n        <div className={css.ProfileInfo}>\r\n\r\n            <img src={props.profile.photos.large\r\n                ? props.profile.photos.large\r\n                : 'https://pbs.twimg.com/profile_images/948912339977457664/kKj0B_jV_400x400.jpg'} alt='Avatar'/>\r\n            <div>\r\n                {props.isOwner && <input type={'file'}  onChange={mainPhotoSelected}/>}\r\n            </div>\r\n\r\n            <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            {\r\n                edit\r\n                    ?<ProfileDataForm  initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                    :<ProfileData isOwner={props.isOwner} goToEditMode={()=>setEditModeB(true)} profile={props.profile}/>\r\n            }\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const ProfileData = ({profile ,isOwner,goToEditMode}:ProfileDataPropsType) =>{\r\n    return <div>\r\n        {isOwner &&<div><button onClick={()=>goToEditMode(true)}>update111</button></div>}\r\n        <h5>fullName:{profile.fullName}</h5>\r\n        <div>aboutMe:{profile.aboutMe}</div>\r\n        <div>lookingForAJob:{profile.lookingForAJob?'yes':'no'}</div>\r\n        {profile.lookingForAJob\r\n        && <div>lookingForAJobDescription:{profile.lookingForAJobDescription} </div>\r\n        }\r\n        <h4>Social</h4>\r\n        <div>{Object.keys(profile.contacts).map(key=>{\r\n            return <Contact contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n        })}</div>\r\n    </div>\r\n}\r\n\r\n\r\nexport function Contact  ({contactTitle,contactValue}:ContactPropsType){\r\n    return <div>\r\n        <b style={{paddingLeft:'10px'}}>{contactTitle}:</b>{contactValue}\r\n    </div>\r\n}\r\n\r\n\r\n\r\n//Type\r\nexport type ProfileDataPropsType = {\r\n    profile:ProfilePropsType\r\n    isOwner:boolean\r\n    goToEditMode:(edit:boolean)=>void\r\n}\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type ContactPropsType={\r\n    contactTitle:string\r\n    contactValue:string\r\n}\r\n\r\n","import React from \"react\";\r\nimport css from './Post.module.css'\r\n\r\nexport type PostPropsType ={\r\n    message:string\r\n    likecount:number\r\n}\r\n\r\nexport const Post = (props:PostPropsType) => {\r\n    return (\r\n        <div className={css.post}>\r\n            <div>\r\n                <img src=\"https://img.favpng.com/11/20/6/ninja-computer-icons-avatar-samurai-png-favpng-mJeFV4xf9mPrz2cwALkbspCd4.jpg\" alt=\"ninja\"/>\r\n                {props.message}\r\n            </div>\r\n            <span> like {props.likecount}</span>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport css from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport { ProfilePropsContainerType } from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validator/validors\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\ntype ProfileFormProps = {\r\n    ProfileInput:string\r\n}\r\nconst maxLength40 =  maxLengthCreator(40)\r\nexport const MyPosts = React.memo((props:ProfilePropsContainerType) => {\r\n\r\n    let postData =  props.profile.postsProfile.map( t => <Post key={t.id} message={t.message} likecount={t.likecount}/>)\r\n\r\n    let addPost = (value:ProfileFormProps)=>{\r\n        props.addPostProfile(value.ProfileInput)\r\n    }\r\n\r\n\r\n    const ProfileForm :React.FC<InjectedFormProps<ProfilePropsContainerType & ProfileFormProps>> = (props)=>{\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Field\r\n                    name=\"ProfileInput\" type='text' component={Textarea}\r\n                    placeholder='Message' validate={[required, maxLength40]}\r\n                />\r\n                <div>\r\n                    <button>add message</button>\r\n                </div>\r\n\r\n\r\n            </form>\r\n        )\r\n    }\r\n\r\n    const ProfileFormReduxForm = reduxForm<ProfilePropsContainerType & ProfileFormProps> ({ form: 'ProfileForm' })(ProfileForm)\r\n\r\n    return (\r\n        <div className={css.content}>\r\n            <h3>My post</h3>\r\n            <div>\r\n                <h4> New Post</h4>\r\n            </div>\r\n            <div>\r\n                <ProfileFormReduxForm  onSubmit={addPost}/>\r\n            </div>\r\n            <div >\r\n                { postData }\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostProfile, InitialProfileStateType} from \"../../../redux/Profile-reducer/Profile_Reducer\";\r\n\r\n\r\nexport type ProfilePropsContainerType =  MapDispatchPropsType & MapStatePropsType\r\n\r\ntype MapDispatchPropsType = {\r\n    addPostProfile: (value:string) =>void\r\n}\r\ntype MapStatePropsType = {\r\n    profile:InitialProfileStateType\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state:AppStateType) : MapStatePropsType  =>{\r\n    return {\r\n        profile:state.profile\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch):MapDispatchPropsType =>{\r\n    return {\r\n        addPostProfile:(value:string)=>{\r\n            dispatch(addPostProfile(value))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport css from \"./Profile.module.css\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePropsType} from \"../../redux/Profile-reducer/Profile_Reducer\";\r\n\r\ntype MapAllToProfilePropsType = {\r\n    profile: ProfilePropsType\r\n    status:string\r\n    updateStatus:(status:string)=>void\r\n    isOwner:boolean\r\n    savePhoto:(e:any)=>void\r\n}\r\n\r\nexport const Profile =React.memo( (props:MapAllToProfilePropsType)=>{\r\n    return(\r\n        <div className={css.content}>\r\n\r\n            <ProfileInfo\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                profile={props.profile}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    ProfilePropsType,  savePhotoTC,\r\n    setUserProfile, setUserStatus, updateStatus,\r\n} from \"../../redux/Profile-reducer/Profile_Reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Preloader} from \"../common/Preloader/preloader\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {getIsAuth, getProfile, getUserId, getStatusProfile, getAuthorizeUserId} from \"../../redux/users-selesctors\";\r\n\r\ntype PathParamsType ={\r\n    userId:string\r\n\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfilePropsType | null\r\n    userId:number\r\n    status:string\r\n    isAuth:boolean\r\n    authorizeUserId:number\r\n}\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    setUserProfile: (userId:number)=>void\r\n    setUserStatus: (userId:number)=>void\r\n    updateStatus: (status:string)=>void\r\n    savePhotoTC:(e:any)=>void\r\n}\r\n\r\n\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchPropsType & PathParamsType\r\ntype CommonPropsType = RouteComponentProps <PathParamsType> & ProfileContainerPropsType\r\n\r\n\r\nexport class ProfileContainer extends React.Component<CommonPropsType> {\r\n\r\n    refreshProfile (){\r\n        let userId= +this.props.match.params.userId\r\n        if (!userId){\r\n            userId=this.props.authorizeUserId\r\n            if (!userId){\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.setUserStatus(userId)\r\n        this.props.setUserProfile(userId)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(this.props.match.params.userId !== this.props.match.params.userId )  this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n             this.props.profile\r\n                 ?\r\n\r\n                 <Profile\r\n                     isOwner ={!+this.props.match.params.userId}\r\n                     {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhotoTC}\r\n                 />\r\n                 :  <Preloader/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) :MapStateToPropsType => ({\r\n    profile: getProfile(state),\r\n    userId:getUserId(state),\r\n    status:getStatusProfile(state),\r\n    isAuth:getIsAuth(state),\r\n    authorizeUserId:getAuthorizeUserId(state)\r\n\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfile,setUserStatus,updateStatus,savePhotoTC}),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n"],"sourceRoot":""}
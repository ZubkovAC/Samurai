{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","utils/validator/validors.tsx","components/common/FormsControls/FormsControls.module.css","Login/Login.tsx"],"names":["FormControl","meta","touched","error","children","hasError","className","css","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","undefined","module","exports","LoginReduxForm","reduxForm","form","captchaUrl","useSelector","state","auth_user","onSubmit","handleSubmit","type","src","alt","Login","isAuth","to","userId","formData","login","inputLogin","inputPassword","inputCheckbox","captcha","connect","maxLength10","BonusForm","BonusReduxForm"],"mappings":"0SAgBaA,EAA6C,SAAC,GAAsC,IAAD,IAApCC,KAAOC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,MAAQC,EAAY,EAAZA,SAC1EC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAIC,YAAc,IAAOH,EAAWE,IAAIJ,MAAQ,KAC3DC,EACD,6BACMC,GAAY,8BAAOF,MAMxBM,EAAwC,SAACC,GAAU,IAErDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAF8C,YAExBS,EAFwB,mBAG5D,OAAO,kBAACV,EAAgBU,EAAO,8CAAcC,EAAWC,MAG/CC,EAAoC,SAACH,GAAW,IAClDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD0C,YACpBS,EADoB,mBAExD,OAAO,kBAACV,EAAgBU,EAAO,2CAAWC,EAAWC,MAGlD,SAASE,EAAyCC,EACAC,EACAC,EACAC,GACwB,IAAxBR,EAAuB,uDAAf,GAAIS,EAAW,uDAAJ,GACzE,OAAO,6BACH,kBAAC,IAAD,eAAOJ,YAAaA,EAAaC,KAAMA,EAChCI,SAAUH,EACVC,UAAWA,GACPR,IAJR,IAKCS,K,iCC5CX,oEAAO,IAAME,EAAW,SAACC,GACrB,IAAIA,EAEJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAqB,SAACF,GAAD,OACjDA,GAASA,EAAMG,OAASD,EAAxB,kBAA+CA,EAA/C,4BAAgFE,K,oBCXpFC,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,iCCD3E,qNA8DMC,EAAiBC,YAAyB,CAACC,KAAM,SAAhCD,EA3CuC,SAACpB,GAC3D,IAAMsB,EAAaC,aAAyC,SAAAC,GAAK,OAAIA,EAAMC,UAAUH,cACrF,OACI,0BAAMI,SAAU1B,EAAM2B,cAClB,6BACI,mCACA,kBAAC,IAAD,CACIrB,KAAM,aAAcsB,KAAK,OACzBpB,UAAWL,IAAOE,YAAa,QAC/BK,SAAU,CAACC,QAGnB,6BACI,uCACA,kBAAC,IAAD,CAAOL,KAAM,gBAAiBsB,KAAK,WAAWpB,UAAWL,IAAOE,YAAa,WACtEK,SAAU,CAACC,QAEtB,6BACI,kBAAC,IAAD,CAAOL,KAAM,gBAAiBsB,KAAK,WAAWpB,UAAW,UAD7D,eAGCR,EAAMP,OACP,6BACKO,EAAMP,OAIV6B,GACD,6BACI,6BACI,yBAAKO,IAAKP,EAAYQ,IAAI,aAE9B,kBAAC,IAAD,CAAOxB,KAAM,UAAWsB,KAAK,OAAOpB,UAAW,WAInD,6BACI,8CAUHuB,EAAQ,SAAC/B,GAIlB,OAAIA,EAAMgC,OACC,kBAAC,IAAD,CAAUC,GAAE,mBAAcjC,EAAMkC,UAGvC,6BACI,qCAEA,kBAACf,EAAD,CAAgBO,SAVP,SAACS,GACdnC,EAAMoC,MAAMD,EAASE,WAAYF,EAASG,cAAeH,EAASI,cAAeJ,EAASK,YAUtF,6BAAK,qCAAL,uBACA,6BAAK,wCAAL,WAaGC,uBALS,SAACjB,GAAD,MAA0B,CAC9CQ,OAAQR,EAAMC,UAAUO,OACxBE,OAAQV,EAAMC,UAAUS,UAGY,CAACE,WAA1BK,CAAkCV,GAGjD,IAAMW,EAAc7B,YAAiB,IACxB8B,EAAqE,SAAC3C,GAE/E,OACI,0BAAM0B,SAAU1B,EAAM2B,cAElB,kBAAC,IAAD,CAAOrB,KAAK,gBAAgBsB,KAAK,OAAOpB,UAAWT,IAC5CW,SAAU,CAACC,IAAU+B,GACrBrC,YAAY,YAGnB,6BACI,8CAKHuC,EAAiBxB,YAAsC,CAACC,KAAM,gBAA7CD,CAA8DuB","file":"static/js/8.af07798c.chunk.js","sourcesContent":["\r\nimport css from './FormsControls.module.css'\r\nimport React from \"react\"\r\nimport  {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validator/validors\";\r\nimport  {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\n\r\n\r\ntype TextAreaProps ={\r\n    input:string\r\n    meta:any\r\n    child:any\r\n}\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\nexport const FormControl:React.FC<FormControlPropsType> = ({meta: {touched, error}, children})=>{\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={css.formControl + '' + ( hasError ? css.error : '' ) }>\r\n            {children}\r\n            <div>\r\n                { hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input:React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n   return <div>\r\n       <Field placeholder={placeholder} name={name}\r\n              validate={validators}\r\n              component={component}\r\n              {...props}\r\n       /> {text}\r\n    </div>\r\n}","export interface AddUserParamsType  {\r\n    value :string\r\n}\r\n\r\n\r\nexport const required = (value:AddUserParamsType) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number)=> (value:any) =>\r\n    value && value.length > maxLength ? `Must be ${maxLength} characters or less` : undefined\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3d2ED\",\"error\":\"FormsControls_error__1gDGv\"};","import React from \"react\"\r\nimport {Field, reduxForm, InjectedFormProps} from 'redux-form'\r\nimport {BonusPropsType} from \"../components/Bonus/BonusContainer\";\r\nimport {BonusType} from \"../components/Bonus/Bonus\";\r\nimport {maxLengthCreator, required} from \"../utils/validator/validors\";\r\nimport {Input, Textarea} from \"../components/common/FormsControls/FormsControls\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {login} from \"../redux/Auth-reducer/auth_reducer\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype UserInputType = {\r\n    inputLogin: string\r\n    inputPassword: string\r\n    inputCheckbox: boolean\r\n    captcha?:string\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<UserInputType>> = (props) => {\r\n    const captchaUrl = useSelector<AppStateType, null | string>(state => state.auth_user.captchaUrl)\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <b>mail</b>\r\n                <Field\r\n                    name={\"inputLogin\"} type=\"text\"\r\n                    component={Input} placeholder={'Login'}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>password</b>\r\n                <Field name={\"inputPassword\"} type=\"password\" component={Input} placeholder={'Password'}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field name={\"inputCheckbox\"} type='checkbox' component={'input'}/>remember me\r\n            </div>\r\n            {props.error &&\r\n            <div>\r\n                {props.error}\r\n            </div>\r\n            }\r\n\r\n            {captchaUrl &&\r\n            <div>\r\n                <div>\r\n                    <img src={captchaUrl} alt='captcha'/>\r\n                </div>\r\n                <Field name={\"captcha\"} type='text' component={'input'}/>\r\n            </div>\r\n            }\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<UserInputType>({form: 'login'})(LoginForm)\r\n\r\n\r\nexport const Login = (props: any) => {\r\n    const onSubmit = (formData: UserInputType) => {\r\n        props.login(formData.inputLogin, formData.inputPassword, formData.inputCheckbox, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={`/profile/${props.userId}`}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n            <div><b>Email:</b> free@samuraijs.com</div>\r\n            <div><b>Password:</b> free</div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth_user.isAuth,\r\n    userId: state.auth_user.userId\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nexport const BonusForm: React.FC<InjectedFormProps<BonusPropsType & BonusType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <Field name=\"BonusTextarea\" type='text' component={Textarea}\r\n                   validate={[required, maxLength10]}\r\n                   placeholder='Message'\r\n\r\n            />\r\n            <div>\r\n                <button>add mes</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const BonusReduxForm = reduxForm<BonusPropsType & BonusType>({form: 'BonusMessage'})(BonusForm)\r\n\r\n\r\n"],"sourceRoot":""}